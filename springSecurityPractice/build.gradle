buildscript {
	//ext (extra) : 변수 설정
    ext {
        spring = "2.6.3"
        boot = "org.springframework.boot"
        lombok = "org.projectlombok:lombok"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("$boot:spring-boot-gradle-plugin:$spring")
    }
}

//모든 프로젝트에 설정
allprojects {
    group = "com.example.demo"
    version = "1.0.0"
}

//서브 프로젝트에 설정
subprojects {
    apply plugin: "java"
    apply plugin: boot
    apply plugin: "io.spring.dependency-management"
    apply plugin: "idea"

    repositories {
        mavenCentral()
    }

    configurations {
    	//개발자 옵션이 있으면 기존 로그인 정보로 자동 로그인이 되기 때문에 개발자옵션을 모두 끄고 서버를 테스트 해야 한다.
        //developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencies {
 		//implementation("$boot:spring-boot-starter-web")
        //developmentOnly("$boot:spring-boot-devtools")
        implementation "$boot:spring-boot-starter-security"
        implementation 'com.fasterxml.jackson.core:jackson-annotations'

        compileOnly lombok
        testCompileOnly lombok
        annotationProcessor lombok
        testAnnotationProcessor lombok

        testImplementation "$boot:spring-boot-starter-test"
    }

    test {
        useJUnitPlatform()
    }

}


["comp", "test", "web"].each {
    def subProjectDir = new File(projectDir, it)
    subProjectDir.eachDir {dir->
        def projectName = ":${it}-${dir.name}"
        project(projectName){
        	//부트 어플리케이션을 실행시키는 Gradle Tasks 창 > 각 프로젝트 > build > bootJar를 사용하지 않게 변경
            bootJar.enabled(false)
            jar.enabled(true)
        }
    }
}
["server"].each {
    def subProjectDir = new File(projectDir, it)
    subProjectDir.eachDir {dir->
        def projectName = ":${it}-${dir.name}"
        project(projectName){

        }
    }
}

help.enabled(false)